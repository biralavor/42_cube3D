# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    all_maps_valgrind.yml                              :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: umeneses <umeneses@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/01/14 16:00:54 by umeneses          #+#    #+#              #
#    Updated: 2025/01/05 08:39:23 by umeneses         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

name: Cub3D with MLX - testing all maps with valgrind

on: [push, pull_request]

jobs:
  cub3d-mlx-valgrind-escape:
    runs-on: ubuntu-latest
    env:
      my_valgrind: >
        valgrind --leak-check=full --track-origins=yes --trace-children-skip='*/bin/*,*/sbin/*,/usr/bin/*'
        --trace-children=yes --track-fds=yes --show-reachable=yes --suppressions=mlx_suppressions.sup

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        sudo apt-get install -y aptitude
        sudo aptitude install -y valgrind
        sudo aptitude install -y libglfw3 libglfw3-dev libglfw3-doc
        sudo apt-get install -y xvfb x11-utils xdotool


    - name: Compile Cube3D with make
      run: make

    - name: Print working directory and list files and directories
      run: |
        pwd
        ls -la

    - name: Check map file permissions
      run: ls -la ./maps

    - name: Create virtual display and test with ESC key
      run: |
        # Start virtual display
        Xvfb :99 -screen 0 1024x768x24 &
        export DISPLAY=:99
        sleep 2  # Give Xvfb time to start
        
        # Create a script to run and send ESC key
        cat << 'EOF' > test_game.sh
        #!/bin/bash
        
        # Start the game with valgrind in background
        ${my_valgrind} ./cub3d ./maps/default.cub > valgrind_output.log 2>&1 &
        GAME_PID=$!
        
        # Wait for window to appear (adjust timeout as needed)
        TIMEOUT=10
        COUNTER=0
        echo "Waiting for game window to appear..."
        while [ $COUNTER -lt $TIMEOUT ]; do
          if xdotool search --name "Cube3D"; then
            WINDOW_ID=$(xdotool search --name "Cube3D" | head -1)
            echo "Found window with ID: $WINDOW_ID"
            break
          fi
          sleep 1
          COUNTER=$((COUNTER+1))
          echo "Still waiting... ($COUNTER/$TIMEOUT)"
        done
        
        if [ -z "$WINDOW_ID" ]; then
          echo "Failed to find game window within timeout"
          kill $GAME_PID
          exit 1
        fi
        
        # Wait a bit for game to fully initialize
        sleep 3
        
        # Send ESC key to window
        echo "Sending ESC key to window $WINDOW_ID"
        xdotool key --window $WINDOW_ID Escape
        
        # Wait for game to exit (with timeout)
        echo "Waiting for game to exit..."
        TIMEOUT=10
        COUNTER=0
        while kill -0 $GAME_PID 2>/dev/null; do
          if [ $COUNTER -ge $TIMEOUT ]; then
            echo "Game did not exit within timeout, forcing kill"
            kill $GAME_PID
            break
          fi
          sleep 1
          COUNTER=$((COUNTER+1))
        done
        
        # Display valgrind output
        cat valgrind_output.log
        
        # Check for memory leaks
        if grep -q "definitely lost: [^0]" valgrind_output.log; then
          echo "❌ Memory leaks detected!"
          exit 1
        else
          echo "✅ No memory leaks detected!"
        fi
        EOF
        
        # Make script executable and run it
        chmod +x test_game.sh
        ./test_game.sh

